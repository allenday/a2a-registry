name: Terraform Infrastructure

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
        - import
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - private-staging
      auto_approve:
        description: 'Auto-approve apply/destroy (use with caution)'
        required: false
        default: false
        type: boolean
      import_resource:
        description: 'Resource to import (e.g., google_service_account.tailscale)'
        required: false
        type: string

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: private-staging
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Setup GCP Credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: '2.1.5'

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker --quiet

    - name: Terraform Init
      run: terraform init
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Terraform Format Check
      run: terraform fmt -check
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Terraform Validate
      run: terraform validate
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Import Resources
      if: inputs.action == 'apply'
      run: |
        # Remove all resources from state
        terraform state rm google_service_account.tailscale || true
        terraform state rm google_compute_subnetwork.private_staging || true
        terraform state rm google_compute_firewall.tailscale || true
        terraform state rm google_project_iam_member.tailscale_node || true
        terraform state rm google_container_node_pool.private_staging_nodes || true
        terraform state rm google_project_service.cloudresourcemanager || true
        terraform state rm 'google_project_service.required_apis["compute.googleapis.com"]' || true
        terraform state rm 'google_project_service.required_apis["container.googleapis.com"]' || true
        terraform state rm 'google_project_service.required_apis["iam.googleapis.com"]' || true
        terraform state rm 'google_project_service.required_apis["serviceusage.googleapis.com"]' || true

        # Import resources
        terraform import google_service_account.tailscale projects/${{ secrets.GCP_PROJECT_ID }}/serviceAccounts/tailscale-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com || true
        terraform import google_compute_subnetwork.private_staging projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-central1/subnetworks/private-staging-subnet || true
        terraform import google_compute_firewall.tailscale projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-tailscale || true
        terraform import google_container_node_pool.private_staging_nodes projects/${{ secrets.GCP_PROJECT_ID }}/locations/us-central1/clusters/a2a-registry-cluster/nodePools/private-staging-node-pool || true
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan
        echo "plan_exit_code=$?" >> $GITHUB_OUTPUT
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Terraform Plan Status
      if: steps.plan.outputs.plan_exit_code == 2
      run: exit 1

    - name: Terraform Plan Status
      if: steps.plan.outputs.plan_exit_code == 0
      run: echo "No changes. Infrastructure is up-to-date!"

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: inputs.action == 'apply' && (inputs.auto_approve == true || github.event_name == 'workflow_dispatch')
      run: |
        # Always create a new plan before applying
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Terraform Destroy
      if: inputs.action == 'destroy' && (inputs.auto_approve == true || github.event_name == 'workflow_dispatch')
      run: terraform destroy -auto-approve
      env:
        TF_VERSION: 1.5.7
        TF_WORKING_DIR: deploy/terraform
        TF_VAR_environment: ${{ inputs.environment }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-credentials.json

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: deploy/terraform/tfplan

    - name: Cleanup
      if: always()
      run: rm -f ${{ github.workspace }}/gcp-credentials.json