# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import registry_pb2 as registry__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in registry_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class A2ARegistryServiceStub(object):
    """A2ARegistryService provides centralized service discovery for A2A agents.
    Agents can register themselves, discover other agents, and manage their availability.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/RegisterAgent',
                request_serializer=registry__pb2.RegisterAgentRequest.SerializeToString,
                response_deserializer=registry__pb2.RegisterAgentResponse.FromString,
                _registered_method=True)
        self.UpdateAgent = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/UpdateAgent',
                request_serializer=registry__pb2.UpdateAgentRequest.SerializeToString,
                response_deserializer=registry__pb2.UpdateAgentResponse.FromString,
                _registered_method=True)
        self.GetAgent = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/GetAgent',
                request_serializer=registry__pb2.GetAgentRequest.SerializeToString,
                response_deserializer=registry__pb2.GetAgentResponse.FromString,
                _registered_method=True)
        self.SearchAgents = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/SearchAgents',
                request_serializer=registry__pb2.SearchAgentsRequest.SerializeToString,
                response_deserializer=registry__pb2.SearchAgentsResponse.FromString,
                _registered_method=True)
        self.ListAgents = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/ListAgents',
                request_serializer=registry__pb2.ListAgentsRequest.SerializeToString,
                response_deserializer=registry__pb2.ListAgentsResponse.FromString,
                _registered_method=True)
        self.DeleteAgent = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/DeleteAgent',
                request_serializer=registry__pb2.DeleteAgentRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ReportHealth = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/ReportHealth',
                request_serializer=registry__pb2.HealthReportRequest.SerializeToString,
                response_deserializer=registry__pb2.HealthReportResponse.FromString,
                _registered_method=True)
        self.GetRegistryInfo = channel.unary_unary(
                '/a2a_registry.v1.A2ARegistryService/GetRegistryInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=registry__pb2.RegistryInfoResponse.FromString,
                _registered_method=True)


class A2ARegistryServiceServicer(object):
    """A2ARegistryService provides centralized service discovery for A2A agents.
    Agents can register themselves, discover other agents, and manage their availability.
    """

    def RegisterAgent(self, request, context):
        """Register an agent with the registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAgent(self, request, context):
        """Update an existing agent registration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgent(self, request, context):
        """Get information about a specific agent by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchAgents(self, request, context):
        """Search for agents based on capabilities, domain, or tags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAgents(self, request, context):
        """List all registered agents with optional filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAgent(self, request, context):
        """Unregister an agent from the registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportHealth(self, request, context):
        """Health check - agent reports its current health status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegistryInfo(self, request, context):
        """Get registry statistics and metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_A2ARegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=registry__pb2.RegisterAgentRequest.FromString,
                    response_serializer=registry__pb2.RegisterAgentResponse.SerializeToString,
            ),
            'UpdateAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAgent,
                    request_deserializer=registry__pb2.UpdateAgentRequest.FromString,
                    response_serializer=registry__pb2.UpdateAgentResponse.SerializeToString,
            ),
            'GetAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgent,
                    request_deserializer=registry__pb2.GetAgentRequest.FromString,
                    response_serializer=registry__pb2.GetAgentResponse.SerializeToString,
            ),
            'SearchAgents': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchAgents,
                    request_deserializer=registry__pb2.SearchAgentsRequest.FromString,
                    response_serializer=registry__pb2.SearchAgentsResponse.SerializeToString,
            ),
            'ListAgents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAgents,
                    request_deserializer=registry__pb2.ListAgentsRequest.FromString,
                    response_serializer=registry__pb2.ListAgentsResponse.SerializeToString,
            ),
            'DeleteAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAgent,
                    request_deserializer=registry__pb2.DeleteAgentRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReportHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportHealth,
                    request_deserializer=registry__pb2.HealthReportRequest.FromString,
                    response_serializer=registry__pb2.HealthReportResponse.SerializeToString,
            ),
            'GetRegistryInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegistryInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=registry__pb2.RegistryInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'a2a_registry.v1.A2ARegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('a2a_registry.v1.A2ARegistryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class A2ARegistryService(object):
    """A2ARegistryService provides centralized service discovery for A2A agents.
    Agents can register themselves, discover other agents, and manage their availability.
    """

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/RegisterAgent',
            registry__pb2.RegisterAgentRequest.SerializeToString,
            registry__pb2.RegisterAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/UpdateAgent',
            registry__pb2.UpdateAgentRequest.SerializeToString,
            registry__pb2.UpdateAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/GetAgent',
            registry__pb2.GetAgentRequest.SerializeToString,
            registry__pb2.GetAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchAgents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/SearchAgents',
            registry__pb2.SearchAgentsRequest.SerializeToString,
            registry__pb2.SearchAgentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAgents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/ListAgents',
            registry__pb2.ListAgentsRequest.SerializeToString,
            registry__pb2.ListAgentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/DeleteAgent',
            registry__pb2.DeleteAgentRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/ReportHealth',
            registry__pb2.HealthReportRequest.SerializeToString,
            registry__pb2.HealthReportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRegistryInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/a2a_registry.v1.A2ARegistryService/GetRegistryInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            registry__pb2.RegistryInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
