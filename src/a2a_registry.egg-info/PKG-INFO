Metadata-Version: 2.4
Name: a2a-registry
Version: 1.0.0
Summary: A2A Agent Registry - gRPC-based agent discovery and registration service
Author-email: Allen Day <allenday@users.github.com>
License: MIT
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: grpcio>=1.60.0
Requires-Dist: grpcio-tools>=1.60.0
Requires-Dist: protobuf>=4.25.0
Requires-Dist: pydantic>=2.5.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: fastapi>=0.104.0
Requires-Dist: python-multipart>=0.0.6
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-grpc>=0.8.0; extra == "dev"
Requires-Dist: black>=23.9.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.6.0; extra == "dev"
Requires-Dist: grpcio-status>=1.60.0; extra == "dev"

# A2A Registry

A gRPC-based service discovery and registration system for A2A (Agent-to-Agent) protocol agents.

## Overview

The A2A Registry provides centralized service discovery for A2A agents, allowing them to:

- **Register** themselves with their capabilities and metadata
- **Discover** other agents based on capabilities, domains, or skills
- **Report health status** and monitor agent availability
- **Search and filter** agents using various criteria

## Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Agent A       │    │   A2A Registry  │    │   Agent B       │
│                 │    │                 │    │                 │
│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │
│ │   gRPC      │◄┼────┼►│   gRPC      │◄┼────┼►│   gRPC      │ │
│ │   Client    │ │    │ │   Server    │ │    │ │   Client    │ │
│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │
│                 │    │                 │    │                 │
│ • Registration  │    │ • Agent Store   │    │ • Registration  │
│ • Health Report │    │ • Health Track  │    │ • Discovery     │
│ • Discovery     │    │ • Search Index  │    │ • Health Report │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## Features

### Core Functionality
- **Agent Registration**: Register agents with full A2A AgentCard information
- **Service Discovery**: Find agents by capabilities, domains, skills, or free-text search
- **Health Monitoring**: Track agent health status with automatic reporting
- **Metadata Management**: Store and search custom metadata and tags

### A2A Protocol Compatibility
- Uses standard A2A AgentCard, AgentCapabilities, and AgentSkill types
- Compatible with existing A2A agent implementations
- Extends A2A with registry-specific capabilities (health checks, domains, tags)

### High Performance
- gRPC-based communication for high throughput
- In-memory storage for fast lookups
- Efficient pagination and filtering
- Async/await support throughout

## Quick Start

### Using Docker Compose

The registry is integrated into the main Polyhegel docker-compose.yml:

```bash
cd /Users/allendy/src/polyhegel/hegel
docker-compose up a2a-registry
```

The registry will be available at `localhost:50051`.

### Manual Installation

1. **Install dependencies:**
   ```bash
   cd a2a-registry
   pip install -e .
   ```

2. **Generate gRPC stubs:**
   ```bash
   make generate-protos
   ```

3. **Run the server:**
   ```bash
   python -m a2a_registry.server --port 50051
   ```

## Usage

### Client Library

```python
import asyncio
from a2a_registry.client import A2ARegistryClient
from a2a_registry.proto.generated.a2a_types_pb2 import AgentCard, AgentProvider, AgentCapabilities

async def example():
    # Create client
    async with A2ARegistryClient("localhost:50051") as client:
        
        # Create an agent card
        agent_card = AgentCard()
        agent_card.name = "My Agent"
        agent_card.description = "A helpful AI agent"
        agent_card.url = "http://localhost:8080"
        agent_card.version = "1.0.0"
        
        # Set provider info
        agent_card.provider.organization = "My Company"
        agent_card.provider.url = "https://mycompany.com"
        
        # Set capabilities
        agent_card.capabilities.streaming = True
        agent_card.capabilities.push_notifications = False
        
        # Register the agent
        agent_id, registration, created = await client.register_agent(
            agent_card=agent_card,
            domains=["strategic", "technical"],
            tags=["planning", "analysis"]
        )
        print(f"Agent registered with ID: {agent_id}")
        
        # Search for agents
        agents, next_token, total = await client.search_agents(
            domains=["strategic"],
            query="planning"
        )
        print(f"Found {len(agents)} matching agents")
        
        # Report health
        from a2a_registry.proto.generated.registry_pb2 import HealthStatus
        await client.report_health(
            agent_id=agent_id,
            status=HealthStatus.HEALTH_HEALTHY,
            message="All systems operational"
        )

# Run the example
asyncio.run(example())
```

### Health Monitoring

```python
from a2a_registry.client import A2ARegistryClient, RegistryHealthReporter

async def health_monitoring_example():
    async with A2ARegistryClient("localhost:50051") as client:
        # Register agent first
        agent_id, _, _ = await client.register_agent(agent_card)
        
        # Set up automatic health reporting
        def health_check():
            # Your health check logic here
            return HealthStatus.HEALTH_HEALTHY, "All good", {"cpu": 45.2}
        
        reporter = RegistryHealthReporter(
            client=client,
            agent_id=agent_id,
            report_interval=300,  # 5 minutes
            health_callback=health_check
        )
        
        # Start automatic health reporting
        await reporter.start()
        
        # Your agent logic here...
        await asyncio.sleep(3600)  # Run for 1 hour
        
        # Stop health reporting
        await reporter.stop()
```

## API Reference

### Registry Service

The A2A Registry implements the following gRPC service:

```protobuf
service A2ARegistryService {
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  rpc UpdateAgent(UpdateAgentRequest) returns (UpdateAgentResponse);
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse);
  rpc SearchAgents(SearchAgentsRequest) returns (SearchAgentsResponse);
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
  rpc DeleteAgent(DeleteAgentRequest) returns (google.protobuf.Empty);
  rpc ReportHealth(HealthReportRequest) returns (HealthReportResponse);
  rpc GetRegistryInfo(google.protobuf.Empty) returns (RegistryInfoResponse);
}
```

### Search Capabilities

The registry supports rich search and filtering:

- **Free-text search**: Search across agent names, descriptions, and skills
- **Tag filtering**: Find agents with specific tags
- **Domain filtering**: Filter by operational domains
- **Capability matching**: Find agents with required capabilities
- **Skill-based search**: Search by specific skill IDs
- **Health filtering**: Filter by health status
- **Sorting and pagination**: Efficient result handling

### Health Status

Agents can report their health using these statuses:
- `HEALTH_HEALTHY`: Agent is fully operational
- `HEALTH_DEGRADED`: Agent is operational but experiencing issues
- `HEALTH_UNHEALTHY`: Agent has significant problems
- `HEALTH_OFFLINE`: Agent is not responding
- `HEALTH_UNKNOWN`: Health status not yet determined

## Configuration

### Environment Variables

- `A2A_REGISTRY_ADDRESS`: Registry server address (default: `localhost:50051`)
- `A2A_REGISTRY_TIMEOUT`: gRPC call timeout in seconds (default: `30`)

### Docker Environment

When running in Docker Compose, agents can connect using:
```yaml
environment:
  - A2A_REGISTRY_ADDRESS=a2a-registry:50051
```

## Development

### Building

```bash
# Install development dependencies
make install-dev

# Generate protobuf stubs
make generate-protos

# Run tests
make test

# Run linting
make lint

# Format code
make format

# Build Docker image
make docker-build
```

### Project Structure

```
a2a-registry/
├── src/a2a_registry/
│   ├── proto/
│   │   ├── a2a_types.proto      # A2A type definitions
│   │   ├── registry.proto       # Registry service definition
│   │   └── generated/           # Generated gRPC stubs
│   ├── server.py               # gRPC server implementation
│   ├── client.py               # Client library
│   └── models.py               # Pydantic models
├── scripts/
│   └── generate_protos.py      # Protobuf generation script
├── Dockerfile                  # Container definition
├── pyproject.toml             # Project configuration
└── README.md                  # This file
```

## Integration with Polyhegel

The A2A Registry is designed to integrate seamlessly with the Polyhegel multi-agent framework:

1. **Startup Sequence**: Registry starts first in docker-compose
2. **Agent Registration**: Polyhegel agents auto-register on startup
3. **Health Monitoring**: Agents report health every 5 minutes
4. **Service Discovery**: Agents can discover each other through the registry

### Example Integration

```python
# In a Polyhegel agent
import os
from a2a_registry.client import register_agent_simple

# Register with registry on startup
registry_address = os.getenv("A2A_REGISTRY_ADDRESS", "localhost:50051")
agent_id = await register_agent_simple(
    registry_address=registry_address,
    agent_card=my_agent_card,
    domains=["strategic"],
    tags=["leader", "planning"]
)
```

## Security Considerations

- **Network Security**: Use TLS in production environments
- **Authentication**: Currently supports insecure connections (add auth as needed)
- **Rate Limiting**: Consider implementing rate limiting for registration endpoints
- **Data Validation**: All inputs are validated using Pydantic models

## Performance

- **Throughput**: Designed for hundreds of agents with thousands of requests/second
- **Latency**: Sub-millisecond response times for most operations
- **Memory**: In-memory storage scales to ~10,000 agents on standard hardware
- **Scaling**: Consider persistent storage and clustering for larger deployments

## Future Enhancements

- **Persistent Storage**: PostgreSQL/Redis backend for durability
- **Authentication**: JWT/OAuth2 support for secure environments
- **Federation**: Multi-registry federation for distributed deployments
- **Metrics**: Prometheus metrics for monitoring
- **WebUI**: Web-based registry management interface

## License

MIT License - see LICENSE file for details.
